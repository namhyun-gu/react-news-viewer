{"version":3,"sources":["hooks/useNews.ts","components/NewsItem.tsx","components/NewsList.tsx","components/NewsHeader.tsx","components/NewsLoadingProgress.tsx","api/NewsAPI.ts","modules/news.ts","hooks/useNewsActions.ts","components/NewsRefreshFab.tsx","components/NewsCategoryFilter.tsx","utils/stringUtil.ts","app/App.tsx","serviceWorker.ts","app/rootReducer.ts","app/rootSaga.ts","index.tsx","app/store.ts"],"names":["useNews","useSelector","state","news","useStyles","makeStyles","theme","createStyles","card","marginBottom","spacing","image","height","NewsItem","classes","Card","className","variant","CardMedia","CardActionArea","onClick","window","open","url","CardContent","Typography","color","source","title","description","NewsList","newsState","status","data","length","map","key","id","NewsHeader","Box","mt","mb","fontWeight","backdrop","zIndex","drawer","NewsLoadingProgress","isShown","Backdrop","CircularProgress","API_KEY","loadNews","a","async","axios","get","newsId","newsList","articles","article","name","urlToImage","publishedAt","fetchNews","watchFetchNews","newsSaga","newsSlice","createSlice","initialState","reducers","fetchLoading","_state","fetchCompleted","action","payload","fetchRequested","createAction","actions","put","call","takeEvery","all","useNewsActions","dispatch","useDispatch","requestFetch","useCallback","fab","position","bottom","right","NewsRefreshFab","Fab","root","display","flexWrap","margin","categories","NewsCategoryFilter","category","Chip","label","s","charAt","toUpperCase","slice","App","useEffect","Fragment","Container","maxWidth","Boolean","location","hostname","match","rootReducer","combineReducers","newsReducer","rootSaga","store","sagaMiddleware","createSagaMiddleware","configureStore","reducer","middleware","getDefaultMiddleware","devTools","run","configureAppStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.477275aa.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../app/rootReducer\";\r\n\r\nexport default function useNews() {\r\n  const news = useSelector((state: RootState) => state.news);\r\n  return news;\r\n}\r\n","import React from 'react';\r\nimport { News } from '../api/NewsAPI';\r\nimport { Card, CardContent, Typography, CardActionArea, CardMedia, makeStyles, Theme, createStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n  card: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  image: {\r\n    height: 240\r\n  }\r\n}));\r\n\r\ntype NewsItemProps = {\r\n  news: News;\r\n};\r\n\r\nfunction NewsItem({\r\n  news\r\n}: NewsItemProps) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={ classes.card } variant=\"outlined\">\r\n      <CardMedia className={ classes.image } image={ news.image } />\r\n      <CardActionArea onClick={ () => { window.open(news.url); } }>\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\">\r\n            { news.source }\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            { news.title }\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\">\r\n            { news.description }\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default NewsItem;","import React from 'react';\r\nimport useNews from '../hooks/useNews';\r\nimport NewsItem from './NewsItem';\r\n\r\nfunction NewsList() {\r\n  const newsState = useNews();\r\n\r\n  if (newsState.status === 'loading') {\r\n    return <div></div>;\r\n  }\r\n\r\n  if (newsState.data.length === 0) {\r\n    return <p>Noting</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        newsState.data.map(news => (\r\n          <NewsItem key={ news.id } news={ news } />\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewsList;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nfunction NewsHeader() {\r\n  return (\r\n    <Box mt={ 4 } mb={ 2 } fontWeight={ 300 }>\r\n      <Typography variant=\"h3\">\r\n        News\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewsHeader;","import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport useNews from '../hooks/useNews';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  }\r\n}));\r\n\r\nfunction NewsLoadingProgress() {\r\n  const classes = useStyles();\r\n  const newsState = useNews();\r\n  const isShown = newsState.status === \"loading\";\r\n\r\n  return (\r\n    <Backdrop className={ classes.backdrop } open={ isShown }>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  );\r\n}\r\n\r\nexport default NewsLoadingProgress;","import axios from \"axios\";\r\n\r\nconst API_KEY = \"7977ad532dd84fe5ac3ba68ae0707e7b\";\r\n\r\nexport interface News {\r\n  id: number;\r\n  source: string;\r\n  title: string;\r\n  description: string;\r\n  url: string;\r\n  image: string;\r\n  publishedAt: string;\r\n  content?: string;\r\n};\r\n\r\nexport async function loadNews() {\r\n  const url = `https://newsapi.org/v2/top-headlines?country=kr&apiKey=${API_KEY}`;\r\n  const { data } = await axios.get(url);\r\n\r\n  let newsId = 0;\r\n  const newsList: News[] = data.articles.map((article: any) => {\r\n    return {\r\n      id: newsId++,\r\n      source: article.source.name,\r\n      title: article.title,\r\n      description: article.description,\r\n      url: article.url,\r\n      image: article.urlToImage,\r\n      publishedAt: article.publishedAt\r\n    };\r\n  });\r\n  return newsList;\r\n}","import { createSlice, PayloadAction, createAction } from '@reduxjs/toolkit';\r\nimport { News } from '../api/NewsAPI';\r\nimport { loadNews } from '../api/NewsAPI';\r\nimport { call, put, takeEvery, all } from 'redux-saga/effects';\r\n\r\nexport type NewsState = { status: 'loading'; } | { status: 'finished'; data: News[]; };\r\n\r\nconst newsSlice = createSlice({\r\n  name: 'news',\r\n  initialState: { status: 'loading' } as NewsState,\r\n  reducers: {\r\n    fetchLoading: (_state: NewsState) => {\r\n      return { status: 'loading' } as NewsState;\r\n    },\r\n    fetchCompleted: (_state: NewsState, action: PayloadAction<News[]>) => {\r\n      return { status: 'finished', data: action.payload } as NewsState;\r\n    }\r\n  }\r\n});\r\n\r\nexport const fetchRequested = createAction('news/fetchRequested');\r\n\r\nexport const { fetchLoading, fetchCompleted } = newsSlice.actions;\r\n\r\nexport default newsSlice.reducer;\r\n\r\nexport function* fetchNews() {\r\n  yield put(fetchLoading());\r\n  const data = yield call(loadNews);\r\n  yield put(fetchCompleted(data));\r\n}\r\n\r\nexport function* watchFetchNews() {\r\n  yield takeEvery('news/fetchRequested', fetchNews);\r\n}\r\n\r\nexport function* newsSaga() {\r\n  yield all([watchFetchNews()]);\r\n}","import { useDispatch } from \"react-redux\";\r\nimport { useCallback } from \"react\";\r\nimport { fetchRequested } from \"../modules/news\";\r\n\r\nexport default function useNewsActions() {\r\n  const dispatch = useDispatch();\r\n  const requestFetch = useCallback(() => dispatch(fetchRequested()), [dispatch]);\r\n  return { requestFetch };\r\n}","import React from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport useNewsActions from '../hooks/useNewsActions';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fab: {\r\n      position: 'fixed',\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    }\r\n  }),\r\n);\r\n\r\nfunction NewsRefreshFab() {\r\n  const classes = useStyles();\r\n  const { requestFetch } = useNewsActions();\r\n\r\n  return (\r\n    <Fab className={ classes.fab } color=\"primary\" onClick={ requestFetch }>\r\n      <RefreshIcon />\r\n    </Fab>\r\n  );\r\n}\r\n\r\nexport default NewsRefreshFab;","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core';\r\nimport { capitalize } from '../utils/stringUtil';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    '& > *': {\r\n      margin: theme.spacing(0.5)\r\n    }\r\n  }\r\n}));\r\n\r\nconst categories = [\r\n  \"General\",\r\n  \"Business\",\r\n  \"Entertainment\",\r\n  \"Health\",\r\n  \"Science\",\r\n  \"Sports\",\r\n  \"Technology\",\r\n];\r\n\r\nfunction NewsCategoryFilter() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={ classes.root } mb={ 2 }>\r\n      {\r\n        categories.map((category) => (\r\n          <Chip key={ category } label={ capitalize(category) } onClick={ () => { } } variant=\"outlined\" />\r\n        ))\r\n      }\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default NewsCategoryFilter;","export function capitalize(s: string): string {\r\n  return s.charAt(0).toUpperCase() + s.slice(1);\r\n}","import React, { useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport NewsList from '../components/NewsList';\nimport NewsHeader from '../components/NewsHeader';\nimport NewsLoadingProgress from '../components/NewsLoadingProgress';\nimport NewsRefreshFab from '../components/NewsRefreshFab';\nimport useNewsActions from '../hooks/useNewsActions';\nimport NewsCategoryFilter from '../components/NewsCategoryFilter';\n\nconst App: React.FC = () => {\n  const { requestFetch } = useNewsActions();\n\n  useEffect(() => {\n    requestFetch();\n  });\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\">\n        <NewsHeader />\n        <NewsCategoryFilter />\n        <NewsList />\n      </Container>\n      <NewsLoadingProgress />\n      <NewsRefreshFab />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\r\nimport newsReducer from \"../modules/news\";\r\n\r\nconst rootReducer = combineReducers({\r\n  news: newsReducer\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { all } from \"redux-saga/effects\";\r\nimport { newsSaga } from \"../modules/news\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([newsSaga()]);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureAppStore from './app/store';\n\nconst store = configureAppStore();\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nexport default function configureAppStore() {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [sagaMiddleware, ...getDefaultMiddleware()],\r\n    devTools: true\r\n  });\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n}"],"sourceRoot":""}